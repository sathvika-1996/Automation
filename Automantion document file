
   """  Install Dependencies
        Need to install requests, beautifulsoup, smtplib libraries.
       
     """



   "source": [
    "import requests, threading, time, csv, datetime, os, smtplib\n",
    "from email.mime.application import MIMEApplication\n",
    "from email.mime.multipart import MIMEMultipart\n",
    "from email.mime.text import MIMEText\n",
    "from bs4 import BeautifulSoup"
   ]


   #Define Constants to save the details and send mails later


   "source": [
    "WEB_URL = \"https://www.goodreads.com\"\n",
    "LOCAL_FILE = \"details.csv\"\n",
    "GMAIL_ID = 'user_mail@gmail.com'\n",          #Please enter the gmail id
    "GMAIL_PASSWORD = \"gmail_password\"\n",       #Please enter the password of the gmail
    "GMAIL_SMTP = 'smtp.gmail.com:587'\n",
    "EMAIL_RECIEVERS = ['sender1_mail@gmail.com' , 'sender2_mail@gmail.com'. 'sender1_mail@gmail.com','sender3_mail@gmail.com']"        #Mention the list of sender mailid
   ]



   #Get list of books available

  {
   "source": [
    "def get_soup(URL = f\"{WEB_URL}/list/show/131897.Middle_Grade_Novels_of_2021\"):\n",
    "    r = requests.get(URL)\n",
    "    return BeautifulSoup(r.content, 'html5lib')"
   ]
  },


    #Get each book's URL to get details later

  {

   "source": [
    "def get_books_urls(soup):\n",
    "    books_urls = {}\n",
    "    try:\n",
    "        tbody = soup.find(id = \"all_votes\").table.tbody\n",
    "        for tr in tbody.find_all(\"tr\"):\n",
    "            tds = tr.find_all(\"td\")\n",
    "            if len(tds) == 4:\n",
    "                title_td = tds[2]\n",
    "                books_urls[title_td.a.span.text] = title_td.a[\"href\"]\n",
    "        return books_urls\n",
    "    except ValueError:\n",
    "        return None"
   ]
  },

    #Get each book's details individually.

  {
   "source": [
    "def get_book_details(url):\n",
    "    try:\n",
    "        r = requests.get(url)\n",
    "        book_soup = BeautifulSoup(r.content, 'html5lib')\n",
    "        meta_col = book_soup.find(id = \"metacol\")\n",
    "        author_div = meta_col.find(id =  \"bookAuthors\")\n",
    "        author_name = author_div.find(\"span\", itemprop = \"name\")\n",
    "        rating = meta_col.find(id = \"bookMeta\").find(\"span\", itemprop = \"ratingValue\")\n",
    "        return  (author_name.text, float(rating.text))\n",
    "    except Exception as e:\n",
    "        return None"
   ]
  },

    #Get all the books' details and store them in a variable


  {
   "source": [
    "def get_books_ratings_authors(books):\n",
    "    book_details = {}\n",
    "    thrds = []\n",
    "    def process_book_details(name, url):\n",
    "        details = get_book_details(url)\n",
    "        while not details:\n",
    "            details = get_book_details(url)\n",
    "        book_details[name] = details\n",
    "    for name, url in books.items():\n",
    "        thrd = threading.Thread(target = process_book_details, args = [name, f\"{WEB_URL}{url}\"])\n",
    "        thrds.append(thrd)\n",
    "        thrd.start()\n",
    "    for thrd in thrds:\n",
    "        thrd.join()\n",
    "    return book_details"
   ]
  },

    "Save the details to a local file"
  {
    "def save_details(book_dets):\n",
    "    with open(LOCAL_FILE, \"w+\") as fl:\n",
    "        writer = csv.writer(fl)\n",
    "        for book_name, details in book_dets.items():\n",
    "            writer.writerow([book_name, *details])"
   ]
  },

    #Send the local file as an attachment in the mail to the recievers.

   "source": [
    "def send_mails():\n",
    "    msg = MIMEMultipart()\n",
    "    msg['From'] = GMAIL_ID\n",
    "    msg['To'] = COMMASPACE.join(EMAIL_RECIEVERS)\n",
    "    msg['Subject'] = \"Autommated Web Scraping Authors List\"\n",
    "\n",
    "    msg.attach(MIMEText(\"\"\"\n",
    "    This is an auto generated email to send the collected list of authors and rating for 100 books from Goodreads website.\n",
    "    Please find the attached file for more details.\n",
    "    Kind Regards Sathvika.\n,
    "    \"\"\"))\n",
    "\n",
    "    with open(LOCAL_FILE, \"rb\") as fil:\n",
    "        part = MIMEApplication(\n",
    "            fil.read(),\n",
    "            Name=basename(f)\n",
    "        )\n",
    "    part['Content-Disposition'] = f'attachment; filename=\"{LOCAL_FILE}\"'\n",
    "    msg.attach(part)\n",
    "\n",
    "    smtp = smtplib.SMTP_SSL(GMAIL_SMTP)\n",
    "    smtp.login(GMAIL_ID, GMAIL_PASSWORD)\n",
    "    smtp.sendmail(GMAIL_ID, EMAIL_RECIEVERS, msg.as_string())\n",
    "    smtp.quit()"
   ]
  },

  #Schedule the mail

  {
"source": [class Scheduler(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

    def run_scipt(self):
        try:
            soup = get_soup()
            books = get_books_urls(soup)
            dets = get_books_ratings_authors(books)
            save_details(dets)
            send_mails()
        except Exception as e:
            print(e)

    def run(self):

                self.run_scipt()
                print("I am able to fetch the the data and send it in csv file to the mentioned sender mail ID")


if __name__ == "__main__":
    sched = Scheduler()
    sched.start()

  }


 #Specification

  {
 { "kernelspec"
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },

  "language_info": {
    "name": "ipython",
    "version": 3
   },

   {
   "file_extension": ".py",
   "version": "3.9.7"
  }
 },

"""  The above Code is able to fetch the 100 books details from goodreads website.
     The details of Book name, Author name , book rating is collected and then sent to the mentioned mail id. """
